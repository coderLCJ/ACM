*************************************************************************************************************************
1¡¢
#include<iostream>
using namespace std;
class cylinder{
public:
     cylinder(double x,double y):r(x),h(y)
     {}
     void fun()
     {
         v=3.14*r*r*h;
     }
     void vol()
     {
         cout<<v<<endl;
     }
private:
    double r,h,v;
};
int main(){
	cylinder A(1,3),B(4,5);
	A.fun();
	B.fun();
	A.vol();
	B.vol();
}


*************************************************************************************************************************
2
#include<bits/stdc++.h>
using namespace std;
class container{
protected:
    double radius;
public:
    container(double radiusl):radius(radiusl)
    {}
    virtual double surface_area()=0;
    virtual double volume()=0;
};
class cube:public container{
public:
    cube(double radiusl):container(radiusl)
    {}
    double surface_area()
    {
        cout<<radius*radius*radius<<endl;
    }
    double volume()
    {
        cout<<radius*radius*radius<<endl;
    }
};
class sphere:public container{
public:
    sphere(double radiusl):container(radiusl)
    {}
    double surface_area()
    {
        cout<<4*3.14*radius*radius<<endl;
    }
    double volume()
    {
        cout<<3.14*radius*radius*radius*4/3<<endl;
    }
};
class cylinder:public container{
double high;
public:
    cylinder(double radiusl,double highl):container(radiusl)
    {
        high=highl;
    }
    double surface_area()
    {
        cout<<3.14*radius*radius*2+2*3.14*radius*high<<endl;
    }
    double volume()
    {
        cout<<3.14*radius*radius*high<<endl;
    }
};
int main(){
	cube a(6.0);
	a.surface_area();
	a.volume();
	sphere b(5.0);
	b.surface_area();
	b.volume();
	cylinder c(5.0,6.0);
	c.surface_area();
	c.volume();
}

*************************************************************************************************************************
3

#include<bits/stdc++.h>
using namespace std;
class complex1{
public:
    complex1(double x,double y):r(x),i(y)
    {}
    void show()
    {
        cout<<r<<' '<<i<<' '<<endl;
    }
    complex1 operator+(complex1 &B)
    {
        r+=B.r;
        i+=B.i;
        return *this;
    }
private:
    double r,i;
};
int main(){
    complex1 a(1,4),b(5,7);
    a=a+b;
    a.show();
}

*************************************************************************************************************************
6
#include<bits/stdc++.h>
using namespace std;
template<class Type>
Type sum(Type A[],int size)
{
     Type s=0;
     for(int i=0;i<size;i++)
        s+=A[i];
     return s;
}
int main(){
    int a[5]={1,2,3,4,5};
    double b[3]={3.4,5.6,1.2};
    cout<<sum(a,5)<<endl;
    cout<<sum(b,3);
}
*************************************************************************************************************************



*************************************************************************************************************************



*************************************************************************************************************************




*************************************************************************************************************************



*************************************************************************************************************************

*************************************************************************************************************************
